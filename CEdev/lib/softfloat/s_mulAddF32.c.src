	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_softfloat_mulAddF32
_softfloat_mulAddF32:
	ld	hl, -56
	call	__frameset
	ld	de, (ix + 6)
	ld.sis	iy, 255
	ld	l, 23
	push	de
	pop	bc
	ld	a, (ix + 9)
	call	__lshru
	ld	l, c
	ld	h, b
	ld	c, iyl
	ld	b, iyh
	call	__sand
	ld	(ix - 9), hl
	ex	de, hl
	ld	e, (ix + 9)
	ld	bc, 8388607
	inc	iyl
	ld	a, iyl
	call	__land
	ld	(ix - 30), hl
	ld	(ix - 21), de
	ld	de, (ix + 12)
	push	de
	pop	bc
	ld	a, (ix + 15)
	ld	l, 23
	call	__lshru
	ld	l, c
	ld	h, b
	ld.sis	bc, 255
	call	__sand
	ld	(ix - 12), hl
	ex	de, hl
	ld	e, (ix + 15)
	ld	bc, 8388607
	ld	a, iyl
	call	__land
	ld	(ix - 15), hl
	ld	(ix - 18), de
	ld	bc, (ix + 18)
	ld	a, (ix + 21)
	ld	l, 31
	call	__lshru
	ld	a, (ix + 24)
	cp	a, 1
	jr	z, BB0_2
	ld	l, 0
	jr	BB0_3
BB0_2:
	ld	l, -1
BB0_3:
	ld	a, l
	and	a, 1
	ld	h, a
	ld	a, c
	and	a, 1
	ld	e, a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, e
	cp	a, l
	ld	(ix - 46), bc
	ld	(ix - 24), h
	jr	nz, BB0_5
	ld	hl, 0
	jr	BB0_6
BB0_5:
	ld	hl, 1
BB0_6:
	ld	(ix - 49), hl
	ld	l, 23
	ld	de, (ix + 18)
	push	de
	pop	bc
	push	af
	ld	a, (ix + 21)
	ld	iyl, a
	pop	af
	ld	a, iyl
	call	__lshru
	ld	l, c
	ld	h, b
	ld.sis	bc, 255
	call	__sand
	ld	(ix - 33), hl
	ex	de, hl
	ld	e, iyl
	ld	bc, 8388607
	ld	iyl, 0
	ld	a, iyl
	call	__land
	ld	(ix - 36), hl
	ld	(ix - 39), de
	ld	hl, (ix + 12)
	ld	e, (ix + 15)
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__lxor
	push	hl
	pop	bc
	ld	a, e
	ld	l, 31
	call	__lshru
	ld	a, (ix + 24)
	cp	a, 2
	ld	l, -1
	ld	d, iyl
	ld	h, l
	jr	z, BB0_8
	ld	h, d
BB0_8:
	ld	a, h
	and	a, 1
	ld	(ix - 27), a
	ld	(ix - 42), bc
	ld	a, c
	and	a, 1
	ld	c, a
	ld	a, h
	and	a, 1
	ld	e, a
	ld	a, c
	cp	a, e
	ld	iy, 0
	jr	nz, BB0_10
	ld	l, d
BB0_10:
	lea	de, iy
	ld	e, (ix - 24)
	lea	bc, iy
	ld	c, (ix - 27)
	ld	(ix - 27), bc
	ld	a, l
	and	a, 1
	ld	(ix - 50), a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	bc, (ix - 9)
	ld	a, c
	cp	a, -1
	ld	(ix - 43), h
	ld	(ix - 24), de
	jp	nz, BB0_16
	ld	hl, (ix - 30)
	ld	de, (ix - 21)
	call	__lcmpzero
	ld	bc, (ix - 12)
	jp	nz, BB0_18
	ld	hl, (ix - 15)
	ld	de, (ix - 18)
	call	__lcmpzero
	push	bc
	pop	de
	jr	z, BB0_14
	ld	a, e
	cp	a, -1
	jp	z, BB0_18
BB0_14:
	ld	iyl, e
	ld	iyh, d
	xor	a, a
	ld	hl, (ix - 15)
	ld	de, (ix - 18)
	lea	bc, iy
	call	__lor
	call	__lcmpzero
	jp	nz, BB0_24
BB0_15:
	ld	hl, ___fe_cur_env
	ld	iy, -4194304
	set	4, (hl)
	ld	e, -1
	jp	BB0_19
BB0_16:
	ld	iy, (ix - 12)
	ld	a, iyl
	cp	a, -1
	jp	nz, BB0_22
	ld	hl, (ix - 15)
	ld	de, (ix - 18)
	call	__lcmpzero
	ld	hl, (ix - 9)
	ld	e, l
	ld	d, h
	ld	hl, (ix - 30)
	ld	(ix - 15), hl
	ld	hl, (ix - 21)
	ld	(ix - 18), hl
	ld	iy, 0
	jp	z, BB0_14
BB0_18:
	ld	l, (ix + 15)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	l, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_softfloat_propagateNaNF32UI
	push	hl
	pop	iy
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB0_19:
	ld	l, (ix + 21)
	push	hl
	ld	hl, (ix + 18)
	push	hl
	push	de
	push	iy
	call	_softfloat_propagateNaNF32UI
BB0_20:
	push	hl
	pop	iy
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB0_21:
	lea	hl, iy
	ld	sp, ix
	pop	ix
	ret
BB0_22:
	ld	de, (ix - 33)
	ld	a, e
	cp	a, -1
	ld	bc, (ix - 21)
	jp	nz, BB0_26
	ld	hl, (ix - 36)
	ld	de, (ix - 39)
	call	__lcmpzero
	ld	iy, 0
	ld	e, iyh
	jp	nz, BB0_19
	jp	BB0_41
BB0_24:
	ld	hl, (ix - 42)
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, (ix - 43)
	and	a, 1
	ld	e, a
	ld	a, l
	cp	a, e
	jr	nz, BB0_29
	ld	a, 0
	jr	BB0_30
BB0_26:
	ld	de, (ix - 9)
	ld	a, e
	or	a, a
	ld	(ix - 53), l
	jp	nz, BB0_35
	ld	hl, (ix - 30)
	ld	de, (ix - 21)
	call	__lcmpzero
	ld	hl, (ix - 33)
	jp	z, BB0_38
	push	de
	ld	hl, (ix - 30)
	push	hl
	pea	ix - 6
	call	_softfloat_normSubnormalF32Sig
	ld	iy, (ix - 12)
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix - 6)
	ld	hl, (ix - 4)
	ld	(ix - 30), hl
	ld	b, (ix - 1)
	jp	BB0_36
BB0_29:
	ld	a, -1
BB0_30:
	ld	l, -1
	ld	bc, (ix - 33)
	bit	0, a
	bit	0, a
	ld	e, l
	jr	nz, BB0_32
	ld	e, 127
BB0_32:
	ld	iy, -8388608
	ld	a, c
	cp	a, -1
	jp	nz, BB0_21
	ld	(ix - 9), e
	ld	hl, (ix - 36)
	ld	de, (ix - 39)
	call	__lcmpzero
	jp	nz, BB0_43
	ld	hl, (ix - 27)
	ld	bc, (ix - 42)
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 24)
	ld	bc, (ix - 46)
	call	__ixor
	ld	a, e
	and	a, 1
	ld	e, a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, e
	cp	a, l
	ld	e, (ix - 9)
	jp	nz, BB0_15
	jp	BB0_21
BB0_35:
	ld	bc, (ix - 21)
	ld	b, c
BB0_36:
	ld	(ix - 9), de
	ld	a, iyl
	or	a, a
	jp	nz, BB0_42
	ld	hl, (ix - 15)
	ld	de, (ix - 18)
	call	__lcmpzero
	ld	hl, (ix - 33)
	jp	nz, BB0_44
BB0_38:
	ld	bc, 0
	ld	c, l
	ld	b, h
	xor	a, a
	ld	hl, (ix - 36)
	ld	de, (ix - 39)
	call	__lor
	call	__lcmpzero
	jr	nz, BB0_41
	ld	hl, (ix - 27)
	ld	bc, (ix - 42)
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 24)
	ld	bc, (ix - 46)
	call	__ixor
	ld	a, e
	and	a, 1
	ld	e, a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, e
	cp	a, l
	ld	iy, (ix + 18)
	ld	e, (ix + 21)
	jp	z, BB0_21
BB0_40:
	ld	iy, 0
	ld	l, 0
	ld	e, l
	jp	BB0_21
BB0_41:
	ld	iy, (ix + 18)
	ld	e, (ix + 21)
	jp	BB0_21
BB0_42:
	ld	(ix - 21), b
	ld	hl, (ix - 18)
	ld	d, l
	jr	BB0_45
BB0_43:
	ld	e, (ix - 9)
	jp	BB0_19
BB0_44:
	ld	(ix - 21), b
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix - 15)
	push	hl
	pea	ix - 6
	call	_softfloat_normSubnormalF32Sig
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix - 6)
	ld	hl, (ix - 4)
	ld	(ix - 15), hl
	ld	d, (ix - 1)
BB0_45:
	ld	bc, (ix - 9)
	add.sis	iy, bc
	ld	(ix - 12), iy
	ld	l, 7
	ld	bc, (ix - 30)
	ld	a, (ix - 21)
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	ld	bc, 0
	ld	iyh, 64
	ld	a, iyh
	call	__lor
	ld	(ix - 9), hl
	ld	iyl, e
	ld	bc, (ix - 15)
	ld	a, d
	ld	l, 7
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	ld	bc, 0
	ld	a, iyh
	call	__lor
	ld	a, e
	push	bc
	pop	de
	ld	e, iyl
	ld	iy, 0
	ld	iyl, a
	push	bc
	push	de
	ld	de, (ix - 9)
	push	de
	lea	de, iy
	call	__llmulu
	push	de
	pop	iy
	pop	de
	pop	de
	pop	de
	ld	de, 8192
	push	de
	ld	de, 0
	push	de
	push	de
	ld	(ix - 9), iy
	lea	de, iy
	ld	(ix - 15), bc
	call	__llcmpu
	pop	de
	pop	de
	pop	de
	ccf
	sbc	a, a
	inc	a
	bit	0, a
	jr	nz, BB0_47
	ld.sis	bc, -126
	jr	BB0_48
BB0_47:
	ld.sis	bc, -127
BB0_48:
	ld	de, 0
	ld	e, (ix - 53)
	ld	(ix - 18), de
	ld	iy, (ix - 12)
	add.sis	iy, bc
	ld	(ix - 12), iy
	and	a, 1
	ld	de, 0
	ld	e, a
	push	de
	ld	de, (ix - 9)
	ld	bc, (ix - 15)
	call	__llshl
	push	hl
	pop	iy
	ld	(ix - 9), de
	pop	hl
	ld	hl, (ix - 33)
	ld	a, l
	or	a, a
	jr	nz, BB0_51
	ld	hl, (ix - 36)
	ld	de, (ix - 39)
	call	__lcmpzero
	jr	nz, BB0_52
	ld	hl, (ix - 12)
	dec.sis	hl
	ld	(ix - 12), hl
	ld	hl, 31
	push	hl
	push	bc
	ld	hl, (ix - 9)
	push	hl
	push	iy
	call	_softfloat_shortShiftRightJam64
	ld	iy, (ix - 12)
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	jp	BB0_66
BB0_51:
	ld	(ix - 56), bc
	ld	(ix - 53), iy
	ld	hl, (ix - 39)
	ld	a, l
	ld	bc, (ix - 36)
	jr	BB0_53
BB0_52:
	ld	(ix - 56), bc
	ld	(ix - 53), iy
	push	de
	push	hl
	pea	ix - 6
	call	_softfloat_normSubnormalF32Sig
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	(ix - 33), hl
	ld	bc, (ix - 4)
	ld	a, (ix - 1)
BB0_53:
	ld	d, 32
	ld	l, 6
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	ld	bc, 0
	ld	a, d
	call	__lor
	ld	(ix - 21), hl
	ld	(ix - 30), e
	ld	iy, (ix - 12)
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	de, (ix - 33)
	or	a, a
	sbc.sis	hl, de
	ld	(ix - 15), hl
	ld	hl, (ix - 27)
	ld	bc, (ix - 42)
	call	__ixor
	push	hl
	pop	de
	ld	hl, (ix - 24)
	ld	bc, (ix - 46)
	call	__ixor
	ld	a, e
	and	a, 1
	ld	e, a
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, e
	cp	a, l
	jp	nz, BB0_56
	ld	iy, 32
	ld.sis	de, 1
	ld	hl, (ix - 15)
	or	a, a
	sbc.sis	hl, de
	call	pe, __setflag
	jp	p, BB0_58
	ld	bc, (ix - 15)
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	d, a
	ld	e, c
	lea	hl, iy
	or	a, a
	sbc	hl, de
	ld	de, 0
	push	de
	push	hl
	ld	hl, (ix - 56)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 53)
	push	hl
	call	_softfloat_shiftRightJam64
	push	hl
	pop	bc
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, e
	ld	hl, (ix - 21)
	ld	e, (ix - 30)
	call	__ladd
	jp	BB0_59
BB0_56:
	ld	iy, 0
	lea	de, iy
	ld	e, (ix - 30)
	ld.sis	bc, 0
	ld	hl, 32
	push	hl
	ld	hl, (ix - 21)
	call	__llshl
	ld	(ix - 24), hl
	ld	(ix - 18), de
	ld	(ix - 21), bc
	pop	hl
	ld.sis	de, 0
	ld	bc, (ix - 15)
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	call	pe, __setflag
	jp	p, BB0_61
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	h, a
	ld	l, c
	call	__ineg
	ld	de, 0
	push	de
	push	hl
	ld	hl, (ix - 56)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 53)
	push	hl
	call	_softfloat_shiftRightJam64
	ld	iy, 15
	add	iy, sp
	ld	sp, iy
	push	bc
	push	de
	push	hl
	ld	hl, (ix - 24)
	ld	de, (ix - 18)
	ld	bc, (ix - 21)
	call	__llsub
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 33)
	ld	(ix - 12), iy
	jp	BB0_68
BB0_58:
	ld	de, 0
	ld	e, (ix - 30)
	ld	(ix - 24), de
	ld.sis	bc, 0
	push	iy
	ld	hl, (ix - 21)
	call	__llshl
	ld	(ix - 21), hl
	pop	iy
	ld	iy, (ix - 15)
	ld	hl, (ix - 24)
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	iy, 0
	push	iy
	push	hl
	push	bc
	push	de
	ld	hl, (ix - 21)
	push	hl
	call	_softfloat_shiftRightJam64
	ld	iy, 15
	add	iy, sp
	ld	sp, iy
	ld	iy, (ix - 56)
	push	iy
	ld	iy, (ix - 9)
	push	iy
	ld	iy, (ix - 53)
	push	iy
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 32
	push	iy
	push	bc
	push	de
	push	hl
	call	_softfloat_shortShiftRightJam64
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	ld	bc, (ix - 12)
	ld	(ix - 33), bc
BB0_59:
	ld	bc, 0
	ld	a, 64
	call	__lcmpu
	jp	nc, BB0_65
	ld	iy, (ix - 33)
	dec.sis	iy
	push	hl
	pop	bc
	ld	a, e
	ld	l, 1
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
	jp	BB0_66
BB0_61:
	or	a, a
	sbc	hl, hl
	ld	l, (ix - 50)
	ld	(ix - 27), hl
	ld	hl, (ix - 12)
	ld	de, (ix - 33)
	sbc.sis	hl, de
	jp	nz, BB0_67
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix - 24)
	push	hl
	ld	hl, (ix - 53)
	ld	de, (ix - 9)
	ld	bc, (ix - 56)
	call	__llsub
	push	hl
	pop	iy
	pop	hl
	pop	hl
	pop	hl
	lea	hl, iy
	call	__llcmpzero
	jp	z, BB0_40
	ld	(ix - 15), bc
	push	bc
	ld	(ix - 18), de
	push	de
	ld	(ix - 9), iy
	push	iy
	ld	de, -1
	push	de
	pop	hl
	ld.sis	bc, -1
	call	__llcmps
	pop	hl
	pop	hl
	pop	hl
	call	pe, __setflag
	jp	p, BB0_73
	ld	hl, (ix - 27)
	ld	(ix - 49), hl
	ld	hl, (ix - 9)
	ld	de, (ix - 18)
	ld	bc, (ix - 15)
	jp	BB0_68
BB0_65:
	ld	iy, (ix - 33)
BB0_66:
	ld	bc, (ix - 18)
	jp	BB0_72
BB0_67:
	ld	iyl, c
	ld	iyh, b
	or	a, a
	sbc	hl, hl
	push	hl
	push	iy
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix - 24)
	push	hl
	call	_softfloat_shiftRightJam64
	ld	iy, 15
	add	iy, sp
	ld	sp, iy
	push	bc
	push	de
	push	hl
	ld	hl, (ix - 53)
	ld	de, (ix - 9)
	ld	bc, (ix - 56)
	call	__llsub
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 27)
	ld	(ix - 49), iy
BB0_68:
	ld	(ix - 9), hl
	push	de
	pop	iy
	ld	(ix - 15), bc
	call	__llctlz
	ld	e, a
	ld	c, e
	dec	c
	ld	a, c
	rlc	a
	sbc	a, a
	ld	b, a
	ld	hl, (ix - 12)
	or	a, a
	sbc.sis	hl, bc
	ld	(ix - 12), hl
	ld	a, e
	cp	a, 33
	jr	nc, BB0_70
	ld	a, 33
	sub	a, e
	ld	l, a
	push	hl
	ld	hl, (ix - 15)
	push	hl
	push	iy
	ld	hl, (ix - 9)
	push	hl
	call	_softfloat_shortShiftRightJam64
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	jr	BB0_71
BB0_70:
	ld	a, e
	add	a, -33
	ld	l, a
	ld	a, iyl
	ld	bc, (ix - 9)
	call	__lshl
	push	bc
	pop	hl
	ld	e, a
BB0_71:
	ld	bc, (ix - 49)
	ld	iy, (ix - 12)
BB0_72:
	push	de
	push	hl
	push	iy
	push	bc
	call	_softfloat_roundPackToF32
	jp	BB0_20
BB0_73:
	ld	hl, (ix - 42)
	ld	a, l
	and	a, 1
	ld	l, a
	ld	a, (ix - 43)
	and	a, 1
	ld	e, a
	ld	a, l
	cp	a, e
	ld	de, (ix - 18)
	ld	bc, (ix - 15)
	jr	z, BB0_75
	ld	hl, 0
	jr	BB0_76
BB0_75:
	ld	hl, 1
BB0_76:
	ld	(ix - 49), hl
	ld	hl, (ix - 9)
	call	__llneg
	jp	BB0_68
	section	.text,"ax",@progbits

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	__Unwind_SjLj_Register
	extern	__lor
	extern	__llneg
	extern	__frameset
	extern	__lcmpzero
	extern	_softfloat_roundPackToF32
	extern	__llcmpzero
	extern	__llsub
	extern	__sand
	extern	_softfloat_normSubnormalF32Sig
	extern	__ladd
	extern	_softfloat_shortShiftRightJam64
	extern	__setflag
	extern	__llcmps
	extern	__llcmpu
	extern	__Unwind_SjLj_Unregister
	extern	__lshl
	extern	__lladd
	extern	__ixor
	extern	__land
	extern	__llshl
	extern	__ineg
	extern	__lxor
	extern	__llctlz
	extern	__llmulu
	extern	__lcmpu
	extern	__lshru
	extern	_softfloat_shiftRightJam64
	extern	___fe_cur_env
	extern	_softfloat_propagateNaNF32UI
