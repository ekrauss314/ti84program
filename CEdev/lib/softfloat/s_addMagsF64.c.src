	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_softfloat_addMagsF64
_softfloat_addMagsF64:
	ld	hl, -54
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, (ix + 15)
	ld	a, (ix + 18)
	ld	bc, 52
	ld	hl, (iy)
	ld	(ix - 27), hl
	ld	hl, (iy + 3)
	ld	(ix - 6), hl
	ld	hl, (iy + 6)
	ld	(ix - 9), hl
	push	bc
	ld	hl, (ix + 6)
	push	de
	pop	iy
	ld	bc, (ix + 12)
	call	__llshru
	pop	de
	ld.sis	bc, 2047
	call	__sand
	ld	(ix - 3), hl
	ld	hl, 15
	push	hl
	scf
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix + 6)
	lea	de, iy
	ld	bc, (ix + 12)
	call	__lland
	ld	(ix - 18), hl
	ld	(ix - 30), de
	ld	(ix - 15), bc
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 52
	push	hl
	ld	iy, (ix - 27)
	lea	hl, iy
	ld	de, (ix - 6)
	ld	bc, (ix - 9)
	call	__llshru
	pop	de
	ld.sis	bc, 2047
	call	__sand
	ld	(ix - 12), hl
	ld	hl, 15
	push	hl
	scf
	sbc	hl, hl
	push	hl
	push	hl
	lea	hl, iy
	ld	de, (ix - 6)
	ld	bc, (ix - 9)
	call	__lland
	ld	(ix - 21), hl
	ld	(ix - 24), de
	ld	iyl, c
	ld	iyh, b
	ld	bc, (ix - 12)
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix - 3)
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld	(ix - 36), hl
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld	(ix - 33), iy
	jp	nz, BB0_3
	ld	iy, (ix - 18)
	ld	bc, (ix - 15)
	ld	hl, (ix - 3)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jp	nz, BB0_8
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	ld	hl, (ix - 21)
	ld	de, (ix - 24)
	ld	bc, (ix - 33)
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	jp	BB0_41
BB0_3:
	ld	hl, 9
	push	hl
	ld	hl, (ix - 18)
	ld	de, (ix - 30)
	ld	bc, (ix - 15)
	call	__llshl
	ld	(ix - 45), hl
	ld	(ix - 39), de
	ld	(ix - 42), bc
	pop	hl
	ld	hl, 9
	push	hl
	ld	hl, (ix - 21)
	ld	de, (ix - 24)
	ld	c, iyl
	ld	b, iyh
	call	__llshl
	ld	(ix - 48), hl
	ld	(ix - 51), de
	ld	(ix - 54), bc
	pop	hl
	ld.sis	de, 0
	ld	hl, (ix - 36)
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	call	pe, __setflag
	ld	bc, 8192
	ld.sis	de, 2047
	jp	p, BB0_10
	ld	hl, (ix - 12)
	or	a, a
	sbc.sis	hl, de
	jp	nz, BB0_15
	ld	hl, (ix - 21)
	ld	de, (ix - 24)
	ld	bc, (ix - 33)
	call	__llcmpzero
	jp	nz, BB0_14
	bit	0, a
	bit	0, a
	ld	hl, 0
	bit	0, a
	jp	nz, BB0_42
	ld.sis	bc, 32752
	jp	BB0_43
BB0_8:
	ld	hl, (ix - 3)
	ld.sis	de, 2047
	or	a, a
	sbc.sis	hl, de
	jp	nz, BB0_17
	push	bc
	ld	hl, (ix - 30)
	push	hl
	push	iy
	ld	hl, (ix - 21)
	ld	de, (ix - 24)
	ld	bc, (ix - 33)
	call	__llor
	pop	iy
	pop	iy
	pop	iy
	jp	BB0_12
BB0_10:
	ld	hl, (ix - 3)
	or	a, a
	sbc.sis	hl, de
	jp	nz, BB0_18
	ld	hl, (ix - 18)
	ld	de, (ix - 30)
	ld	bc, (ix - 15)
BB0_12:
	call	__llcmpzero
	jr	nz, BB0_14
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	jp	BB0_41
BB0_14:
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 27)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_softfloat_propagateNaNF64UI
	ld	iy, 18
	jp	BB0_40
BB0_15:
	ld	hl, (ix - 3)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jp	z, BB0_20
	ld	a, 0
	jp	BB0_21
BB0_17:
	ld	hl, 32
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	lea	hl, iy
	ld	de, (ix - 30)
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 33)
	push	iy
	ld	iy, (ix - 24)
	push	iy
	ld	iy, (ix - 21)
	push	iy
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 9
	push	iy
	call	__llshl
	pop	iy
	ld	iy, (ix - 3)
	jp	BB0_39
BB0_18:
	ld	hl, (ix - 12)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jp	z, BB0_28
	ld	de, (ix - 48)
	ld	a, 0
	jp	BB0_29
BB0_20:
	ld	a, -1
BB0_21:
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	hl, (ix - 45)
	push	bc
	push	de
	push	de
	ld	de, (ix - 39)
	ld	bc, (ix - 42)
	call	__lladd
	ld	(ix - 21), hl
	ld	(ix - 9), de
	ld	(ix - 6), bc
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, (ix - 18)
	ld	de, (ix - 30)
	ld	bc, (ix - 15)
	call	__llshl
	ld	(ix - 3), hl
	pop	hl
	bit	0, a
	jr	nz, BB0_23
	ld	hl, (ix - 21)
	ld	(ix - 3), hl
BB0_23:
	bit	0, a
	jr	nz, BB0_25
	ld	de, (ix - 9)
BB0_25:
	bit	0, a
	jp	nz, BB0_27
	ld	bc, (ix - 6)
BB0_27:
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	call	__sneg
	ld	iy, 0
	push	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	push	iy
	push	bc
	push	de
	ld	hl, (ix - 3)
	push	hl
	call	_softfloat_shiftRightJam64
	ld	(ix - 45), hl
	ld	(ix - 39), de
	ld	(ix - 42), bc
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (ix + 18)
	ld	iy, 0
	ld	hl, 8192
	ld	de, (ix - 51)
	ld	bc, (ix - 54)
	jp	BB0_36
BB0_28:
	ld	de, (ix - 48)
	ld	a, -1
BB0_29:
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 24)
	push	bc
	push	hl
	push	hl
	ex	de, hl
	ld	de, (ix - 51)
	ld	bc, (ix - 54)
	call	__lladd
	ld	(ix - 12), hl
	ld	(ix - 6), de
	ld	(ix - 9), bc
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, (ix - 21)
	lea	de, iy
	ld	bc, (ix - 33)
	call	__llshl
	pop	iy
	bit	0, a
	jr	nz, BB0_31
	ld	hl, (ix - 12)
BB0_31:
	bit	0, a
	jr	nz, BB0_33
	ld	de, (ix - 6)
BB0_33:
	ld	(ix - 6), hl
	bit	0, a
	jr	nz, BB0_35
	ld	hl, (ix - 9)
	ld	c, l
	ld	b, h
BB0_35:
	or	a, a
	sbc	hl, hl
	push	hl
	ld	iy, (ix - 36)
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	push	hl
	push	bc
	push	de
	ld	hl, (ix - 6)
	push	hl
	call	_softfloat_shiftRightJam64
	ld	(ix - 48), hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	ld	(ix - 12), hl
	ld	a, (ix + 18)
	ld	iy, 0
	ld	hl, 8192
BB0_36:
	push	hl
	push	iy
	push	iy
	ld	hl, (ix - 48)
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 42)
	push	iy
	ld	iy, (ix - 39)
	push	iy
	ld	iy, (ix - 45)
	push	iy
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 16384
	push	iy
	ld	iy, 0
	push	iy
	push	iy
	call	__llcmpu
	pop	iy
	pop	iy
	pop	iy
	jp	nc, BB0_38
	ld	iy, (ix - 12)
	dec.sis	iy
	ld	(ix - 12), iy
	ld	iy, 1
	push	iy
	call	__llshl
	pop	iy
BB0_38:
	ld	iy, (ix - 12)
BB0_39:
	push	bc
	push	de
	push	hl
	push	iy
	ld	l, a
	push	hl
	call	_softfloat_roundPackToF64
	ld	iy, 15
BB0_40:
	add	iy, sp
	ld	sp, iy
BB0_41:
	ld	sp, ix
	pop	ix
	ret
BB0_42:
	ld.sis	bc, -16
BB0_43:
	push	hl
	pop	de
	jp	BB0_41
	section	.text,"ax",@progbits

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	__llcmpzero
	extern	__sand
	extern	__setflag
	extern	__sneg
	extern	__llcmpu
	extern	__Unwind_SjLj_Unregister
	extern	__llshru
	extern	__lladd
	extern	_softfloat_propagateNaNF64UI
	extern	_softfloat_roundPackToF64
	extern	__llor
	extern	__llshl
	extern	__lland
	extern	_softfloat_shiftRightJam64
