	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_softfloat_approxRecipSqrt32_1
_softfloat_approxRecipSqrt32_1:
	ld	hl, -20
	call	__frameset
	ld	de, (ix + 9)
	ld	iy, 14
	ld	l, 27
	push	de
	pop	bc
	ld	a, (ix + 12)
	call	__lshru
	push	bc
	pop	hl
	lea	bc, iy
	call	__iand
	push	hl
	pop	iy
	ld	bc, (ix + 6)
	add	iy, bc
	ld	l, 12
	push	de
	pop	bc
	ld	a, (ix + 12)
	call	__lshru
	push	bc
	pop	de
	ld	c, 1
	lea	hl, iy
	call	__ishl
	push	hl
	pop	bc
	ld	hl, _softfloat_approxRecipSqrt_1k0s
	add	hl, bc
	ld	hl, (hl)
	ld	(ix - 3), hl
	ld	hl, _softfloat_approxRecipSqrt_1k1s
	add	hl, bc
	ld	hl, (hl)
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ex	de, hl
	ld	e, a
	ld	bc, 65535
	xor	a, a
	call	__land
	lea	bc, iy
	ld	d, a
	call	__lmulu
	push	hl
	pop	bc
	ld	a, e
	ld	l, 20
	call	__lshru
	ld	hl, (ix - 3)
	or	a, a
	sbc.sis	hl, bc
	ld	iy, 0
	lea	bc, iy
	ld	c, l
	ld	b, h
	push	bc
	pop	hl
	ld	e, d
	ld	(ix - 3), bc
	ld	a, d
	call	__lmulu
	push	hl
	pop	bc
	ld	a, e
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_2
	ld	l, 0
	jr	BB0_3
BB0_2:
	ld	l, 1
BB0_3:
	call	__lshl
	ld	iyl, a
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 12)
	ld	de, 0
	push	de
	push	hl
	ld	hl, (ix + 9)
	push	hl
	push	bc
	pop	hl
	lea	de, iy
	ld.sis	bc, 0
	call	__llmulu
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 23
	push	iy
	call	__llshru
	pop	bc
	call	__lnot
	ld	(ix - 9), hl
	ld	l, 16
	ld	bc, (ix - 3)
	push	bc
	pop	iy
	xor	a, a
	call	__lshl
	ld	(ix - 6), bc
	ld	bc, 0
	ld	c, e
	ld	(ix - 13), bc
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	push	iy
	ld	hl, (ix - 9)
	push	bc
	pop	de
	ld.sis	bc, 0
	call	__llmulu
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 25
	push	iy
	call	__llshru
	push	hl
	pop	bc
	pop	hl
	ld	d, e
	ld	hl, (ix - 6)
	ld	e, a
	ld	a, d
	call	__ladd
	ld	(ix - 6), hl
	ld	a, e
	or	a, a
	sbc	hl, hl
	push	hl
	ld	de, (ix - 13)
	push	de
	ld	hl, (ix - 9)
	push	hl
	ld.sis	bc, 0
	call	__llmulu
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 32
	push	iy
	call	__llshru
	ld	(ix - 9), hl
	ld	(ix - 13), de
	ld	(ix - 16), bc
	pop	hl
	ld	de, (ix - 6)
	push	de
	pop	bc
	ld	h, a
	ld	(ix - 10), h
	ld	l, 1
	call	__lshru
	ld	(ix - 19), bc
	ld	(ix - 20), a
	ld	l, 3
	push	de
	pop	bc
	ld	a, h
	call	__lshru
	push	bc
	pop	iy
	ld	d, a
	ld	hl, (ix - 3)
	ld	e, 0
	ld	bc, -16384
	ld	a, -1
	call	__lmulu
	push	hl
	pop	bc
	ld	a, e
	lea	hl, iy
	ld	e, d
	call	__ladd
	ld	bc, (ix - 19)
	ld	a, (ix - 20)
	call	__ladd
	ld	bc, 0
	ld	c, e
	ld	de, 0
	push	de
	push	bc
	push	hl
	ld	hl, (ix - 9)
	ld	de, (ix - 13)
	ld	bc, (ix - 16)
	call	__llmulu
	pop	iy
	pop	iy
	pop	iy
	ld	iy, 48
	push	iy
	ld	iy, 0
	call	__llshru
	push	hl
	pop	bc
	pop	hl
	ld	a, e
	ld	hl, (ix - 6)
	ld	e, (ix - 10)
	call	__ladd
	push	hl
	pop	bc
	ld	d, e
	lea	hl, iy
	ld	e, -128
	ld	a, d
	call	__lcmpu
	ccf
	sbc	a, a
	inc	a
	bit	0, a
	jr	nz, BB0_5
	lea	bc, iy
BB0_5:
	bit	0, a
	jr	nz, BB0_7
	ld	d, -128
BB0_7:
	push	bc
	pop	hl
	ld	e, d
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	_softfloat_approxRecipSqrt_1k0s
	extern	__Unwind_SjLj_Register
	extern	__Unwind_SjLj_Unregister
	extern	__lshl
	extern	__frameset
	extern	__llshru
	extern	__iand
	extern	_softfloat_approxRecipSqrt_1k1s
	extern	__lmulu
	extern	__lnot
	extern	__land
	extern	__llmulu
	extern	__lcmpu
	extern	__lshru
	extern	__ishl
	extern	__ladd
