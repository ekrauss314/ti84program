	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	___f64_roundToInt
___f64_roundToInt:
	ld	hl, -21
	call	__frameset
	ld	hl, (ix + 6)
	ld	iy, (ix + 9)
	ld	bc, (ix + 12)
	ld	a, (ix + 15)
	ld.sis	de, 0
	ld	(ix - 9), de
	ld	de, 52
	push	de
	lea	de, iy
	call	__llshru
	pop	de
	ld	bc, 2047
	call	__iand
	push	hl
	pop	bc
	ld	de, 1023
	or	a, a
	sbc	hl, de
	jp	nc, BB0_8
	ld	(ix - 12), bc
	ld	hl, 32767
	push	hl
	scf
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__lland
	pop	iy
	pop	iy
	pop	iy
	call	__llcmpzero
	jp	z, BB0_10
	ld	bc, (ix + 12)
	bit	0, (ix + 18)
	jr	z, BB0_4
	ld	hl, ___fe_cur_env
	set	5, (hl)
BB0_4:
	ld	hl, -32768
	push	hl
	ld	iy, 0
	push	iy
	push	iy
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	call	__lland
	ld	(ix - 6), hl
	ld	(ix - 3), de
	pop	hl
	pop	hl
	pop	hl
	cp	a, 5
	jp	nc, BB0_39
	lea	de, iy
	ld	e, a
	ld	hl, JTI0_0
	add	hl, de
	add	hl, de
	add	hl, de
	ld	hl, (hl)
	ld	iy, (ix - 6)
	ld	de, (ix - 3)
	jp	(hl)
BB0_6:
	ld	(ix - 9), bc
	ld	hl, 15
	push	hl
	scf
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__lland
	pop	iy
	pop	iy
	pop	iy
	call	__llcmpzero
	jp	z, BB0_60
	ld	de, 1022
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	ld	iy, 0
	ld	bc, (ix - 9)
	jp	nz, BB0_39
	jp	BB0_46
BB0_8:
	ld	de, 1075
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jp	c, BB0_12
	ld	(ix - 12), bc
	ld	hl, 15
	push	hl
	scf
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__lland
	pop	iy
	pop	iy
	pop	iy
	call	__llcmpzero
	jp	nz, BB0_15
BB0_10:
	ld	iy, (ix + 6)
	ld	de, (ix + 9)
BB0_11:
	ld	hl, (ix + 12)
	ld	c, l
	ld	b, h
	jp	BB0_40
BB0_12:
	ld	hl, 1075
	ld	de, 1
	or	a, a
	sbc	hl, bc
	push	hl
	push	de
	pop	hl
	dec	de
	ld.sis	bc, 0
	call	__llshl
	push	hl
	pop	iy
	pop	hl
	scf
	sbc	hl, hl
	push	hl
	push	hl
	push	hl
	ld	(ix - 3), iy
	lea	hl, iy
	push	de
	pop	iy
	ld	(ix - 6), bc
	call	__lladd
	ld	(ix - 15), hl
	pop	hl
	pop	hl
	pop	hl
	ld	l, a
	or	a, a
	ld	(ix - 12), iy
	jp	nz, BB0_17
	ld	hl, 1
	push	hl
	ld	hl, (ix - 3)
	ld	(ix - 18), de
	lea	de, iy
	ld	(ix - 21), bc
	ld	bc, (ix - 6)
	call	__llshru
	pop	iy
	ld	iy, (ix + 12)
	push	iy
	ld	iy, (ix + 9)
	push	iy
	ld	iy, (ix + 6)
	push	iy
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 21)
	push	iy
	ld	iy, (ix - 18)
	push	iy
	ld	iy, (ix - 15)
	push	iy
	ld	(ix - 18), hl
	ld	(ix - 9), de
	ld	(ix - 15), bc
	call	__lland
	pop	iy
	pop	iy
	pop	iy
	call	__llcmpzero
	jp	nz, BB0_19
	ld	hl, (ix - 3)
	ld	de, (ix - 12)
	ld	bc, (ix - 6)
	call	__llnot
	push	bc
	push	de
	push	hl
	ld	hl, (ix - 18)
	ld	de, (ix - 9)
	ld	bc, (ix - 15)
	call	__lland
	jp	BB0_34
BB0_15:
	ld	de, 2047
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	jr	z, BB0_20
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ex	de, hl
	jp	BB0_11
BB0_17:
	ld	a, l
	cp	a, 4
	jr	nz, BB0_21
	ld	hl, 1
	push	hl
	ld	hl, (ix - 3)
	ld	de, (ix - 12)
	ld	bc, (ix - 6)
	call	__llshru
	pop	iy
	ld	iy, (ix + 12)
	push	iy
	ld	iy, (ix + 9)
	push	iy
	ld	iy, (ix + 6)
	push	iy
	call	__lladd
	push	hl
	pop	iy
	ld	(ix - 9), de
	ld	hl, (ix - 3)
	ld	(ix - 15), bc
	ld	bc, (ix - 6)
	pop	de
	pop	de
	pop	de
	ld	de, (ix - 12)
	ld	a, (ix + 18)
	jp	BB0_35
BB0_19:
	ld	a, (ix + 18)
	ld	hl, (ix - 3)
	ld	de, (ix - 12)
	ld	bc, (ix - 6)
	ld	iy, (ix - 18)
	jp	BB0_35
BB0_20:
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	push	hl
	ld	hl, (ix + 12)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_softfloat_propagateNaNF64UI
	push	hl
	pop	iy
	pop	hl
	pop	hl
	pop	hl
	jp	BB0_47
BB0_21:
	ld	(ix - 21), bc
	ld	(ix - 18), de
	ld.sis	bc, -1
	ld	iy, (ix + 12)
	push	iy
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	ld	de, -1
	push	de
	pop	hl
	call	__llcmps
	pop	hl
	pop	hl
	pop	hl
	call	pe, __setflag
	jp	m, BB0_23
	ld	hl, 2
	jr	BB0_24
BB0_23:
	ld	hl, 3
BB0_24:
	ld	de, 0
	ld	a, l
	ld	l, (ix + 15)
	cp	a, l
	ld	iy, (ix + 9)
	ld	bc, (ix + 12)
	jr	z, BB0_26
	ld	a, 0
	jr	BB0_27
BB0_26:
	ld	a, -1
BB0_27:
	ld	hl, (ix + 6)
	bit	0, a
	jr	nz, BB0_29
	ld	(ix - 15), de
BB0_29:
	bit	0, a
	jr	nz, BB0_31
	ld	(ix - 18), de
BB0_31:
	bit	0, a
	jp	nz, BB0_33
	ld.sis	de, 0
	ld	(ix - 21), de
BB0_33:
	push	bc
	push	iy
	push	hl
	ld	hl, (ix - 15)
	ld	de, (ix - 18)
	ld	bc, (ix - 21)
	call	__lladd
BB0_34:
	push	hl
	pop	iy
	ld	(ix - 9), de
	ld	(ix - 15), bc
	pop	hl
	pop	hl
	pop	hl
	ld	a, (ix + 18)
	ld	hl, (ix - 3)
	ld	de, (ix - 12)
	ld	bc, (ix - 6)
BB0_35:
	call	__llneg
	push	bc
	push	de
	push	hl
	lea	hl, iy
	ld	de, (ix - 9)
	ld	bc, (ix - 15)
	call	__lland
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix + 12)
	push	iy
	ld	iy, (ix + 9)
	push	iy
	ld	iy, (ix + 6)
	push	iy
	ld	(ix - 6), hl
	ld	(ix - 3), de
	ld	iyl, c
	ld	iyh, b
	call	__llcmpu
	pop	hl
	pop	hl
	pop	hl
	jr	z, BB0_38
	bit	0, a
	jr	z, BB0_38
	ld	hl, ___fe_cur_env
	set	5, (hl)
BB0_38:
	ld	c, iyl
	ld	b, iyh
BB0_39:
	ld	iy, (ix - 6)
	ld	de, (ix - 3)
BB0_40:
	lea	hl, iy
	ld	sp, ix
	pop	ix
	ret
BB0_41:
	lea	hl, iy
	call	__llcmpzero
	jr	z, BB0_48
	ld	a, 0
	jr	BB0_49
BB0_43:
	lea	hl, iy
	ld	iyl, c
	ld	iyh, b
	call	__llcmpzero
	jr	z, BB0_52
	ld	a, 0
	jr	BB0_53
BB0_45:
	ld	de, 1022
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	ld	iy, 0
	jr	nz, BB0_39
BB0_46:
	ld	hl, 16368
	push	hl
	push	iy
	push	iy
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	call	__lladd
	push	hl
	pop	iy
BB0_47:
	pop	hl
	pop	hl
	pop	hl
	jr	BB0_40
BB0_48:
	ld	a, 1
BB0_49:
	bit	0, a
	ld	hl, 0
	bit	0, a
	bit	0, a
	jr	nz, BB0_51
	ld.sis	de, -16400
	ld	(ix - 9), de
BB0_51:
	push	hl
	pop	iy
	ex	de, hl
	ld	bc, (ix - 9)
	jr	BB0_40
BB0_52:
	ld	a, 1
BB0_53:
	ld	de, 0
	bit	0, a
	push	de
	pop	hl
	ld	c, iyl
	ld	b, iyh
	jr	nz, BB0_55
	ld	hl, (ix - 6)
BB0_55:
	bit	0, a
	ld	iy, (ix - 3)
	jr	nz, BB0_57
	lea	de, iy
BB0_57:
	bit	0, a
	jr	z, BB0_59
	ld.sis	bc, 16368
BB0_59:
	push	hl
	pop	iy
	jp	BB0_40
BB0_60:
	ld	bc, (ix - 9)
	jp	BB0_39
	section	.text,"ax",@progbits
	section	.rodata,"a",@progbits
	private	JTI0_0
JTI0_0:
	dl	BB0_6
	dl	BB0_40
	dl	BB0_41
	dl	BB0_43
	dl	BB0_45

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	__Unwind_SjLj_Register
	extern	__llneg
	extern	__frameset
	extern	__llcmpzero
	extern	__llnot
	extern	__setflag
	extern	__llcmps
	extern	__llcmpu
	extern	__Unwind_SjLj_Unregister
	extern	__llshru
	extern	__iand
	extern	_softfloat_propagateNaNF64UI
	extern	__lladd
	extern	__llshl
	extern	__lland
	extern	___fe_cur_env
