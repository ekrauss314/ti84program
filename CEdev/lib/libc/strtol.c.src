	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_strtol
_strtol:
	ld	hl, -32
	call	__frameset
	ld	bc, (ix + 6)
	ld	iy, (ix + 9)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, hl
	ld	(ix - 6), hl
	ex	de, hl
	ld	de, 37
	sbc	hl, de
	jr	c, BB0_2
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	e, 0
	jp	nz, BB0_67
	jp	BB0_68
BB0_2:
	ld	a, -128
	ld	(ix - 16), a
	ld	a, 16
	ld	(ix - 10), a
	push	bc
	pop	iy
BB0_3:
	lea	hl, iy
	inc	iy
	ld	(ix - 3), iy
	ld	(ix - 9), hl
	ld	a, (hl)
	or	a, a
	sbc	hl, hl
	ld	(ix - 12), a
	ld	l, a
	push	hl
	call	_isspace
	ld	iy, (ix - 3)
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_3
	ld	e, (ix - 12)
	ld	a, e
	cp	a, 43
	jr	z, BB0_6
	ld	a, e
	cp	a, 45
	ld	d, e
	jr	nz, BB0_7
BB0_6:
	ld	hl, (ix - 9)
	push	hl
	pop	iy
	lea	bc, iy + 2
	ld	d, (iy + 1)
	push	bc
	pop	iy
BB0_7:
	ld	hl, (ix + 12)
	ld	bc, 255
	call	__iand
	ld	a, l
	or	a, a
	jr	z, BB0_9
	ld	a, l
	cp	a, 16
	jr	nz, BB0_13
BB0_9:
	ld	a, d
	cp	a, 48
	jr	nz, BB0_13
	ld	a, (iy)
	cp	a, 88
	jr	z, BB0_12
	cp	a, 120
	jr	nz, BB0_13
BB0_12:
	ld	d, (iy + 1)
	lea	iy, iy + 2
	ld	bc, 0
	jr	BB0_31
BB0_13:
	ld	a, l
	or	a, a
	jr	z, BB0_15
	ld	a, l
	cp	a, 2
	jr	nz, BB0_19
BB0_15:
	ld	a, d
	cp	a, 48
	jr	nz, BB0_19
	ld	a, (iy)
	cp	a, 66
	ld	bc, 0
	jr	z, BB0_18
	cp	a, 98
	jr	nz, BB0_23
BB0_18:
	ld	d, (iy + 1)
	lea	iy, iy + 2
	ld	a, 2
	jr	BB0_30
BB0_19:
	ld	hl, (ix + 12)
	ld	a, l
	or	a, a
	jr	z, BB0_21
	ld	l, 0
	jr	BB0_22
BB0_21:
	ld	l, -1
BB0_22:
	ld	bc, 0
	ld	a, d
	cp	a, 48
	ld	a, 10
	jr	z, BB0_27
	jr	BB0_28
BB0_23:
	ld	hl, (ix + 12)
	ld	a, l
	or	a, a
	jr	z, BB0_25
	ld	l, 0
	jr	BB0_26
BB0_25:
	ld	l, -1
BB0_26:
	ld	d, 48
BB0_27:
	ld	a, 8
BB0_28:
	bit	0, l
	jr	nz, BB0_30
	ld	hl, (ix + 12)
	ld	a, l
BB0_30:
	ld	(ix - 10), a
BB0_31:
	ld	a, e
	cp	a, 45
	jr	z, BB0_33
	ld	a, 0
	jr	BB0_34
BB0_33:
	ld	a, -1
BB0_34:
	bit	0, a
	ld	hl, 0
	jr	nz, BB0_36
	scf
	sbc	hl, hl
BB0_36:
	ld	(ix - 9), d
	bit	0, a
	jr	nz, BB0_38
	ld	a, 127
	ld	(ix - 16), a
BB0_38:
	ld	c, (ix - 10)
	xor	a, a
	ld	(ix - 22), hl
	ld	e, (ix - 16)
	call	__ldivu
	ld	(ix - 26), hl
	ld	(ix - 23), e
	ld	(ix - 29), bc
	call	__lmulu
	push	hl
	pop	de
	ld	hl, (ix - 22)
	or	a, a
	sbc	hl, de
	ld	(ix - 32), hl
	or	a, a
	sbc	hl, hl
	dec	iy
	ld	(ix - 3), iy
	ld	e, a
	ld	(ix - 11), e
	ld	bc, 0
	ld	a, (ix - 9)
BB0_39:
	ld	(ix - 9), a
	ld	(ix - 6), e
	ld	(ix - 15), bc
	ld	l, a
	ld	(ix - 19), hl
	push	hl
	call	_isdigit
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_44
	ld	hl, (ix - 19)
	push	hl
	call	_isalpha
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix + 9)
	ld	bc, (ix + 6)
	jp	z, BB0_55
	ld	hl, (ix - 19)
	push	hl
	call	_isupper
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, -87
	jr	z, BB0_43
	ld	a, -55
BB0_43:
	add	a, (ix - 9)
	jr	BB0_45
BB0_44:
	ld	a, (ix - 9)
	add	a, -48
BB0_45:
	ld	d, a
	ld	iy, (ix + 9)
	ld	bc, (ix + 6)
	ld	e, (ix - 23)
	ld	l, (ix - 10)
	cp	a, l
	jp	nc, BB0_55
	ld	a, (ix - 11)
	cp	a, 0
	call	pe, __setflag
	jp	p, BB0_48
	ld	bc, (ix - 15)
	ld	e, (ix - 6)
	ld	a, -1
	ld	(ix - 11), a
	ld	iy, (ix - 3)
	jr	BB0_54
BB0_48:
	ld	hl, (ix - 26)
	ld	bc, (ix - 15)
	ld	a, (ix - 6)
	call	__lcmpu
	ld	iy, (ix - 3)
	jr	nc, BB0_50
	ld	e, a
	ld	a, -1
	jr	BB0_53
BB0_50:
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 26)
	ld	a, (ix - 23)
	call	__lcmpu
	jr	nz, BB0_52
	ld	bc, 0
	ld	c, d
	ld	hl, (ix - 32)
	or	a, a
	sbc	hl, bc
	ld	bc, (ix - 26)
	ld	e, (ix - 23)
	ld	a, -1
	ld	(ix - 11), a
	jr	c, BB0_54
BB0_52:
	xor	a, a
	ld	hl, (ix - 15)
	ld	e, (ix - 6)
	ld	bc, (ix - 29)
	call	__lmulu
	ld	bc, 0
	ld	c, d
	call	__ladd
	push	hl
	pop	bc
	inc	a
BB0_53:
	ld	(ix - 11), a
BB0_54:
	ld	a, (iy + 1)
	inc	iy
	ld	(ix - 3), iy
	or	a, a
	sbc	hl, hl
	jp	BB0_39
BB0_55:
	ld	a, (ix - 11)
	cp	a, 0
	call	pe, __setflag
	jp	p, BB0_57
	ld	hl, 5
	ld	(_errno), hl
	ld	hl, (ix - 22)
	ld	(ix - 6), hl
	ld	e, (ix - 16)
	jr	BB0_64
BB0_57:
	ld	a, (ix - 12)
	cp	a, 45
	jr	z, BB0_59
	ld	a, 0
	jr	BB0_60
BB0_59:
	ld	a, -1
BB0_60:
	ld	d, (ix - 6)
	ld	hl, (ix - 15)
	ld	e, d
	call	__lneg
	ld	(ix - 6), hl
	bit	0, a
	jr	nz, BB0_62
	ld	hl, (ix - 15)
	ld	(ix - 6), hl
BB0_62:
	bit	0, a
	jr	nz, BB0_64
	ld	e, d
BB0_64:
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_68
	ld	a, (ix - 11)
	or	a, a
	jr	z, BB0_67
	ld	bc, (ix - 3)
BB0_67:
	ld	(iy), bc
BB0_68:
	ld	hl, (ix - 6)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	_isalpha
	extern	__ldivu
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_isspace
	extern	__lmulu
	extern	_isupper
	extern	_isdigit
	extern	_errno
	extern	__ladd
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__iand
	extern	__lcmpu
	extern	__lneg
