	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_strtold
_strtold:
	ld	hl, -35
	call	__frameset
	ld	de, (ix + 6)
	xor	a, a
	ld	(ix - 29), a
	ld.sis	hl, 0
	ld	(ix - 12), hl
	ld.sis	hl, 32752
	ld	(ix - 15), hl
BB0_1:
	ld	(ix - 9), de
	ex	de, hl
	ld	(ix - 3), hl
	ld	a, (hl)
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	l, a
	push	hl
	call	_isspace
	pop	de
	ld	de, (ix - 9)
	inc	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	nz, BB0_1
	ld	(ix - 9), de
	ld	hl, (ix - 3)
	ld	a, (hl)
	cp	a, 45
	ld	e, -1
	ld	c, 0
	ld	l, e
	jr	z, BB0_4
	ld	l, c
BB0_4:
	ld	(ix - 28), a
	cp	a, 43
	ld	iy, 0
	jr	z, BB0_6
	ld	e, c
BB0_6:
	ld	a, l
	or	a, e
	ld	l, a
	ld	bc, 1
	call	__iand
	push	hl
	pop	bc
	ld	(ix - 6), iy
	ld	(ix - 3), iy
	ld	de, (ix - 9)
BB0_7:
	push	de
	pop	iy
	add	iy, bc
	push	bc
	pop	hl
	ld	c, (iy - 1)
	ld	a, c
	add	a, -48
	cp	a, 10
	jp	nc, BB0_9
	ld	(ix - 21), hl
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	de, -48
	add	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	de
	push	bc
	pop	hl
	call	__ltod
	ld	(ix - 18), hl
	ld	(ix - 24), de
	ld	(ix - 27), bc
	ld	hl, 16420
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	ld	bc, (ix - 12)
	call	__dmul
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 27)
	push	iy
	ld	iy, (ix - 24)
	push	iy
	ld	iy, (ix - 18)
	push	iy
	call	__dadd
	ld	(ix - 6), hl
	ld	(ix - 3), de
	ld	de, (ix - 9)
	ld	(ix - 12), bc
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 21)
	inc	bc
	jp	BB0_7
BB0_9:
	ld	(ix - 24), iy
	ld	a, c
	cp	a, 46
	jp	nz, BB0_13
	ld	iy, 0
	ld	(ix - 18), iy
	push	hl
	pop	bc
BB0_11:
	ex	de, hl
	ld	de, (ix - 18)
	add	hl, de
	add	hl, bc
	push	bc
	pop	de
	ld	c, (hl)
	ld	a, c
	add	a, -48
	cp	a, 10
	jp	nc, BB0_14
	lea	hl, iy
	ld	l, c
	ld	(ix - 21), de
	ld	de, -48
	add	hl, de
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	de
	push	bc
	pop	hl
	call	__ltod
	ld	(ix - 27), hl
	ld	(ix - 32), de
	ld	(ix - 35), bc
	ld	hl, 16420
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	ld	bc, (ix - 12)
	call	__dmul
	pop	iy
	pop	iy
	pop	iy
	ld	iy, (ix - 35)
	push	iy
	ld	iy, (ix - 32)
	push	iy
	ld	iy, (ix - 27)
	push	iy
	ld	iy, 0
	call	__dadd
	ld	(ix - 6), hl
	ld	(ix - 3), de
	ld	de, (ix - 9)
	ld	(ix - 12), bc
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 18)
	inc	hl
	ld	(ix - 18), hl
	ld	bc, (ix - 21)
	jp	BB0_11
BB0_13:
	ld	de, (ix - 24)
	dec	de
	ld	iy, 0
	ld	(ix - 18), iy
	jr	BB0_15
BB0_14:
	ld	hl, (ix - 24)
	ld	de, (ix - 18)
	add	hl, de
	ex	de, hl
BB0_15:
	ld	a, c
	cp	a, 69
	jr	z, BB0_17
	ld	a, c
	cp	a, 101
	jr	nz, BB0_21
BB0_17:
	lea	bc, iy
	push	de
	pop	iy
	ld	a, (iy + 1)
	cp	a, 43
	jr	nz, BB0_19
	lea	iy, iy + 2
	jr	BB0_23
BB0_19:
	push	de
	pop	iy
	cp	a, 45
	jr	nz, BB0_22
	lea	iy, iy + 2
	ld	a, 1
	ld	(ix - 29), a
	jr	BB0_23
BB0_21:
	ld	bc, (ix - 12)
	ld	hl, (ix + 9)
	jr	BB0_26
BB0_22:
	inc	iy
BB0_23:
	ld	l, (iy)
	ld	a, l
	add	a, -48
	cp	a, 10
	jr	nc, BB0_25
	ld	de, 0
	ld	e, l
	push	bc
	pop	hl
	ld	bc, 10
	call	__imulu
	ld	bc, -48
	add	hl, bc
	add	hl, de
	push	hl
	pop	bc
	jr	BB0_22
BB0_25:
	lea	de, iy
	ld	hl, (ix + 9)
	push	bc
	pop	iy
	ld	bc, (ix - 12)
BB0_26:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_28
	ld	(hl), de
BB0_28:
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	call	__llcmpzero
	jr	nz, BB0_30
	ld	l, c
	ld	h, b
	ld	(ix - 15), hl
	jp	BB0_46
BB0_30:
	lea	hl, iy
	call	__ineg
	bit	0, (ix - 29)
	jr	z, BB0_32
	push	hl
	pop	iy
BB0_32:
	lea	hl, iy
	ld	de, (ix - 18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	de, 0
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	call	pe, __setflag
	push	de
	pop	hl
	ld	iy, 0
	jp	m, BB0_34
	lea	hl, iy
BB0_34:
	ld	(ix - 9), hl
BB0_35:
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jp	m, BB0_38
	ld	hl, 16420
	push	hl
	push	iy
	push	iy
	ld	hl, (ix - 6)
	ld	(ix - 18), de
	ld	de, (ix - 3)
	ld	bc, (ix - 12)
	call	__dmul
	pop	iy
	pop	iy
	pop	iy
	ld	(ix - 12), bc
	push	bc
	ld	(ix - 3), de
	push	de
	ld	(ix - 6), hl
	push	hl
	call	__isfinitel
	ld	de, (ix - 18)
	ld	iy, 0
	pop	hl
	pop	hl
	pop	hl
	bit	0, a
	jp	z, BB0_39
	dec	de
	jp	BB0_35
BB0_38:
	ld	de, (ix - 9)
	ld	hl, (ix - 12)
	ld	(ix - 15), hl
	jr	BB0_40
BB0_39:
	ld	hl, 5
	ld	(_errno), hl
	ld	(ix - 6), iy
	ld	(ix - 3), iy
BB0_40:
	push	de
	pop	hl
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	push	de
	pop	hl
	jp	p, BB0_42
	lea	hl, iy
BB0_42:
	inc	hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	iy
BB0_43:
	dec	iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB0_46
	ld	hl, 16420
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, (ix - 6)
	ld	de, (ix - 3)
	ld	bc, (ix - 15)
	call	__ddiv
	ld	(ix - 6), hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	ld	(ix - 3), de
	ld	(ix - 15), bc
	call	__llcmpzero
	jr	nz, BB0_43
	ld	hl, 5
	ld	(_errno), hl
BB0_46:
	ld	a, (ix - 28)
	ld	iy, (ix - 6)
	cp	a, 45
	jr	z, BB0_48
	ld	a, 0
	jr	BB0_49
BB0_48:
	ld	a, -1
BB0_49:
	lea	hl, iy
	ld	de, (ix - 3)
	ld	bc, (ix - 15)
	call	__dneg
	bit	0, a
	jr	nz, BB0_51
	lea	hl, iy
BB0_51:
	bit	0, a
	jr	nz, BB0_53
	ld	de, (ix - 3)
BB0_53:
	bit	0, a
	jr	nz, BB0_55
	ld	bc, (ix - 15)
BB0_55:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_isspace
	extern	__llcmpzero
	extern	_errno
	extern	__dadd
	extern	__setflag
	extern	__Unwind_SjLj_Unregister
	extern	__iand
	extern	__imulu
	extern	__dmul
	extern	__ltod
	extern	__ineg
	extern	__dneg
	extern	__isfinitel
	extern	__ddiv
