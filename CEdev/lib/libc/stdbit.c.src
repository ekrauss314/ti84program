	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_stdc_leading_zeros_uc
_stdc_leading_zeros_uc:
	call	__frameset0
	ld	a, (ix + 6)
	call	__bctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_zeros_us
_stdc_leading_zeros_us:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__sctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_zeros_ui
_stdc_leading_zeros_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__ictlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_zeros_ul
_stdc_leading_zeros_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	call	__lctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_zeros_ui48
_stdc_leading_zeros_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, 255
	call	__i48ctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 256
	add	hl, de
	call	__iand
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_zeros_ull
_stdc_leading_zeros_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_ones_uc
_stdc_leading_ones_uc:
	call	__frameset0
	ld	a, (ix + 6)
	cpl
	call	__bctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_ones_us
_stdc_leading_ones_us:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__snot
	call	__sctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_ones_ui
_stdc_leading_ones_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__inot
	call	__ictlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_ones_ul
_stdc_leading_ones_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	call	__lnot
	call	__lctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_ones_ui48
_stdc_leading_ones_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, 255
	call	__i48not
	call	__i48ctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 256
	add	hl, de
	call	__iand
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_leading_ones_ull
_stdc_leading_ones_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llnot
	call	__llctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_zeros_uc
_stdc_trailing_zeros_uc:
	call	__frameset0
	ld	l, (ix + 6)
	push	hl
	call	___ez80_ctzc
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_zeros_us
_stdc_trailing_zeros_us:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__scttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_zeros_ui
_stdc_trailing_zeros_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__icttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_zeros_ul
_stdc_trailing_zeros_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	call	__lcttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_zeros_ui48
_stdc_trailing_zeros_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	push	de
	push	hl
	call	___ez80_ctzi48
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_zeros_ull
_stdc_trailing_zeros_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llcttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_ones_uc
_stdc_trailing_ones_uc:
	call	__frameset0
	ld	a, (ix + 6)
	cpl
	ld	l, a
	push	hl
	call	___ez80_ctzc
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_ones_us
_stdc_trailing_ones_us:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__snot
	call	__scttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_ones_ui
_stdc_trailing_ones_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__inot
	call	__icttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_ones_ul
_stdc_trailing_ones_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	call	__lnot
	call	__lcttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_ones_ui48
_stdc_trailing_ones_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	call	__i48not
	push	de
	push	hl
	call	___ez80_ctzi48
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_trailing_ones_ull
_stdc_trailing_ones_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llnot
	call	__llcttz
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_zero_uc
_stdc_first_leading_zero_uc:
	call	__frameset0
	ld	a, (ix + 6)
	or	a, a
	sbc	hl, hl
	cp	a, -1
	jr	z, BB24_2
	cpl
	call	__bctlz
	inc	a
	or	a, a
	sbc	hl, hl
	ld	l, a
BB24_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_zero_us
_stdc_first_leading_zero_us:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	de, 0
	ld.sis	bc, -1
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, bc
	jr	z, BB25_2
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	call	__snot
	call	__sctlz
	ld	l, a
	ld	h, 0
	inc.sis	hl
	ld	de, 0
	ld	e, l
	ld	d, h
BB25_2:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_zero_ui
_stdc_first_leading_zero_ui:
	call	__frameset0
	ld	bc, (ix + 6)
	ld	iy, 0
	push	bc
	pop	hl
	call	__inot
	call	__ictlz
	ld	de, 0
	push	bc
	pop	hl
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB26_2
	ld	e, a
	inc	de
	push	de
	pop	iy
BB26_2:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_zero_ul
_stdc_first_leading_zero_ul:
	call	__frameset0
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	push	bc
	pop	hl
	ld	e, a
	call	__lnot
	push	hl
	pop	iy
	ld	d, e
	push	bc
	pop	hl
	ld	e, a
	ld	bc, -1
	ld	a, b
	call	__lcmpu
	jr	z, BB27_2
	ld	c, 0
	jr	BB27_3
BB27_2:
	ld	c, 1
BB27_3:
	lea	hl, iy
	ld	e, d
	call	__lctlz
	ld	de, 0
	bit	0, c
	ld	hl, 0
	jr	nz, BB27_5
	ld	e, a
	inc	de
	ex	de, hl
BB27_5:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_zero_ui48
_stdc_first_leading_zero_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, -1
	push	bc
	pop	iy
	call	__i48cmpu
	inc	bc
	jr	z, BB28_2
	ld	bc, 255
	call	__i48not
	call	__i48ctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 256
	add	hl, de
	call	__iand
	push	hl
	pop	bc
	inc	bc
BB28_2:
	push	bc
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_zero_ull
_stdc_first_leading_zero_ull:
	ld	hl, -9
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llnot
	ld	(ix - 9), hl
	ld	(ix - 3), de
	ld	(ix - 6), bc
	scf
	sbc	hl, hl
	push	hl
	push	hl
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llcmpu
	pop	hl
	pop	hl
	pop	hl
	jr	z, BB29_2
	ld	iyl, 0
	jr	BB29_3
BB29_2:
	ld	iyl, 1
BB29_3:
	ld	hl, (ix - 9)
	ld	de, (ix - 3)
	ld	bc, (ix - 6)
	call	__llctlz
	ld	de, 0
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	bit	0, l
	ld	hl, 0
	jr	nz, BB29_5
	ld	e, a
	inc	de
	ex	de, hl
BB29_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_one_uc
_stdc_first_leading_one_uc:
	call	__frameset0
	ld	e, (ix + 6)
	or	a, a
	sbc	hl, hl
	ld	a, e
	or	a, a
	jr	z, BB30_2
	ld	a, e
	call	__bctlz
	inc	a
	or	a, a
	sbc	hl, hl
	ld	l, a
BB30_2:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_one_us
_stdc_first_leading_one_us:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, 0
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jp	z, BB31_2
	call	__sctlz
	ld	l, a
	ld	h, 0
	inc.sis	hl
	ld	de, 0
	ld	e, l
	ld	d, h
BB31_2:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_one_ui
_stdc_first_leading_one_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, 0
	call	__ictlz
	ld	bc, 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB32_2
	ld	c, a
	inc	bc
	push	bc
	pop	de
BB32_2:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_one_ul
_stdc_first_leading_one_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	ld	bc, 0
	call	__lcmpzero
	jr	z, BB33_2
	ld	d, 0
	jr	BB33_3
BB33_2:
	ld	d, 1
BB33_3:
	call	__lctlz
	or	a, a
	sbc	hl, hl
	bit	0, d
	jr	nz, BB33_5
	ld	l, a
	inc	hl
	push	hl
	pop	bc
BB33_5:
	push	bc
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_one_ui48
_stdc_first_leading_one_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, 0
	call	__i48cmpzero
	jr	z, BB34_2
	ld	bc, 255
	call	__i48ctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 256
	add	hl, de
	call	__iand
	push	hl
	pop	bc
	inc	bc
BB34_2:
	push	bc
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_leading_one_ull
_stdc_first_leading_one_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llcmpzero
	jr	z, BB35_2
	ld	iyl, 0
	jr	BB35_3
BB35_2:
	ld	iyl, 1
BB35_3:
	call	__llctlz
	ld	bc, 0
	ld	e, iyl
	bit	0, e
	ld	hl, 0
	jr	nz, BB35_5
	ld	c, a
	inc	bc
	push	bc
	pop	hl
BB35_5:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_zero_uc
_stdc_first_trailing_zero_uc:
	call	__frameset0
	ld	a, (ix + 6)
	cpl
	ld	l, a
	push	hl
	call	___ez80_ffsc
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_zero_us
_stdc_first_trailing_zero_us:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__snot
	push	hl
	call	___ez80_ffss
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_zero_ui
_stdc_first_trailing_zero_ui:
	call	__frameset0
	ld	bc, (ix + 6)
	ld	iy, 0
	push	bc
	pop	hl
	call	__inot
	call	__icttz
	ld	de, 0
	push	bc
	pop	hl
	ld	bc, -1
	or	a, a
	sbc	hl, bc
	jr	z, BB38_2
	ld	e, a
	inc	de
	push	de
	pop	iy
BB38_2:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_zero_ul
_stdc_first_trailing_zero_ul:
	ld	hl, -1
	call	__frameset
	ld	bc, (ix + 6)
	ld	d, (ix + 9)
	push	bc
	pop	hl
	ld	e, d
	call	__lnot
	call	__lcttz
	ld	(ix - 1), a
	ld	iy, 0
	push	bc
	pop	hl
	ld	e, d
	ld	bc, -1
	ld	a, b
	call	__lcmpu
	jr	z, BB39_2
	ld	a, 0
	jr	BB39_3
BB39_2:
	ld	a, 1
BB39_3:
	bit	0, a
	ld	hl, 0
	jr	nz, BB39_5
	push	af
	ld	a, (ix - 1)
	ld	iyl, a
	pop	af
	inc	iy
	lea	hl, iy
BB39_5:
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_zero_ui48
_stdc_first_trailing_zero_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	call	__i48not
	push	de
	push	hl
	call	___ez80_ffsi48
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_zero_ull
_stdc_first_trailing_zero_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llnot
	call	__llcttz
	ld	iy, 0
	scf
	sbc	hl, hl
	push	hl
	push	hl
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llcmpu
	pop	hl
	pop	hl
	pop	hl
	jr	z, BB41_2
	ld	l, 0
	jr	BB41_3
BB41_2:
	ld	l, 1
BB41_3:
	bit	0, l
	ld	hl, 0
	jr	nz, BB41_5
	ld	iyl, a
	inc	iy
	lea	hl, iy
BB41_5:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_one_uc
_stdc_first_trailing_one_uc:
	call	__frameset0
	ld	l, (ix + 6)
	push	hl
	call	___ez80_ffsc
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_one_us
_stdc_first_trailing_one_us:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	___ez80_ffss
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_one_ui
_stdc_first_trailing_one_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, 0
	call	__icttz
	ld	bc, 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB44_2
	ld	c, a
	inc	bc
	push	bc
	pop	de
BB44_2:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_one_ul
_stdc_first_trailing_one_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	ld	iy, 0
	call	__lcttz
	ld	bc, 0
	call	__lcmpzero
	jr	z, BB45_2
	ld	l, 0
	jr	BB45_3
BB45_2:
	ld	l, 1
BB45_3:
	bit	0, l
	jr	nz, BB45_5
	ld	c, a
	inc	bc
	push	bc
	pop	iy
BB45_5:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_one_ui48
_stdc_first_trailing_one_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	push	de
	push	hl
	call	___ez80_ffsi48
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_first_trailing_one_ull
_stdc_first_trailing_one_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llcttz
	ld	iy, 0
	call	__llcmpzero
	jr	z, BB47_2
	ld	l, 0
	jr	BB47_3
BB47_2:
	ld	l, 1
BB47_3:
	bit	0, l
	ld	hl, 0
	jr	nz, BB47_5
	ld	iyl, a
	inc	iy
	lea	hl, iy
BB47_5:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_zeros_uc
_stdc_count_zeros_uc:
	call	__frameset0
	ld	a, (ix + 6)
	cpl
	ld	l, a
	push	hl
	call	___ez80_popcountc
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_zeros_us
_stdc_count_zeros_us:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	___ez80_popcounts
	pop	hl
	ld	de, 0
	ld	e, a
	ld	hl, 16
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_zeros_ui
_stdc_count_zeros_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__inot
	call	__ipopcnt
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_zeros_ul
_stdc_count_zeros_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	bc, 32
	ld	e, (ix + 9)
	call	__lpopcnt
	ld	de, 0
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_zeros_ui48
_stdc_count_zeros_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	push	de
	push	hl
	call	___ez80_popcounti48
	pop	hl
	pop	hl
	ld	de, 0
	ld	e, a
	ld	hl, 48
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_zeros_ull
_stdc_count_zeros_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	ld	iy, 64
	call	__llpopcnt
	ld	de, 0
	ld	e, a
	lea	hl, iy
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_ones_uc
_stdc_count_ones_uc:
	call	__frameset0
	ld	l, (ix + 6)
	push	hl
	call	___ez80_popcountc
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_ones_us
_stdc_count_ones_us:
	call	__frameset0
	ld	hl, (ix + 6)
	push	hl
	call	___ez80_popcounts
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_ones_ui
_stdc_count_ones_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	call	__ipopcnt
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_ones_ul
_stdc_count_ones_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	call	__lpopcnt
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_ones_ui48
_stdc_count_ones_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	push	de
	push	hl
	call	___ez80_popcounti48
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_count_ones_ull
_stdc_count_ones_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llpopcnt
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_has_single_bit_uc
_stdc_has_single_bit_uc:
	call	__frameset0
	ld	e, (ix + 6)
	ld	l, e
	dec	l
	ld	a, e
	and	a, l
	ld	l, a
	ld	a, e
	or	a, a
	ld	c, -1
	ld	h, 0
	ld	e, c
	jr	nz, BB60_2
	ld	e, h
BB60_2:
	ld	a, l
	or	a, a
	jr	z, BB60_4
	ld	c, h
BB60_4:
	ld	a, e
	and	a, c
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_has_single_bit_us
_stdc_has_single_bit_us:
	call	__frameset0
	ld	de, (ix + 6)
	ld	c, e
	ld	b, d
	dec.sis	bc
	ld	l, e
	ld	h, d
	call	__sand
	ld	c, l
	ld	b, h
	ld	l, e
	ld	h, d
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	ld	e, -1
	ld	d, 0
	ld	a, e
	jr	nz, BB61_2
	ld	a, d
BB61_2:
	ld	l, c
	ld	h, b
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jr	z, BB61_4
	ld	e, d
BB61_4:
	and	a, e
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_has_single_bit_ui
_stdc_has_single_bit_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	xor	a, a
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB62_4
	push	hl
	pop	bc
	dec	bc
	call	__iand
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB62_3
	ld	a, 0
	jr	BB62_4
BB62_3:
	ld	a, -1
BB62_4:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_has_single_bit_ul
_stdc_has_single_bit_ul:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	d, (ix + 9)
	xor	a, a
	lea	hl, iy
	ld	e, d
	call	__lcmpzero
	jr	z, BB63_4
	ld	bc, -1
	ld	a, b
	lea	hl, iy
	ld	e, d
	call	__ladd
	push	hl
	pop	bc
	ld	a, e
	lea	hl, iy
	ld	e, d
	call	__land
	call	__lcmpzero
	jr	z, BB63_3
	ld	a, 0
	jr	BB63_4
BB63_3:
	ld	a, -1
BB63_4:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_has_single_bit_ui48
_stdc_has_single_bit_ui48:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	xor	a, a
	call	__i48cmpzero
	jr	z, BB64_4
	ld	bc, -1
	push	hl
	pop	iy
	add	iy, bc
	push	de
	pop	hl
	adc	hl, bc
	ld	(ix - 3), hl
	ld	hl, (ix + 6)
	lea	bc, iy
	ld	iy, (ix - 3)
	call	__i48and
	call	__i48cmpzero
	jr	z, BB64_3
	ld	a, 0
	jr	BB64_4
BB64_3:
	ld	a, -1
BB64_4:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_has_single_bit_ull
_stdc_has_single_bit_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	xor	a, a
	call	__llcmpzero
	jp	z, BB65_4
	ld	de, -1
	push	de
	push	de
	push	de
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__lladd
	pop	iy
	pop	iy
	pop	iy
	push	bc
	push	de
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__lland
	pop	iy
	pop	iy
	pop	iy
	call	__llcmpzero
	jr	z, BB65_3
	ld	a, 0
	jr	BB65_4
BB65_3:
	ld	a, -1
BB65_4:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_width_uc
_stdc_bit_width_uc:
	call	__frameset0
	ld	l, 8
	ld	a, (ix + 6)
	call	__bctlz
	ld	e, a
	ld	a, l
	sub	a, e
	or	a, a
	sbc	hl, hl
	ld	l, a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_width_us
_stdc_bit_width_us:
	call	__frameset0
	ld	hl, (ix + 6)
	ld.sis	de, 16
	call	__sctlz
	ld	c, a
	ld	b, d
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld	de, 0
	ld	e, l
	ld	d, h
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_width_ui
_stdc_bit_width_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, 24
	call	__ictlz
	ld	bc, 0
	ld	c, a
	ex	de, hl
	or	a, a
	sbc	hl, bc
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_width_ul
_stdc_bit_width_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	bc, 32
	ld	e, (ix + 9)
	call	__lctlz
	ld	de, 0
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_width_ui48
_stdc_bit_width_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, 255
	ld	iy, 48
	call	__i48ctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 256
	add	hl, de
	call	__iand
	push	hl
	pop	de
	lea	hl, iy
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_width_ull
_stdc_bit_width_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	ld	iy, 64
	call	__llctlz
	ld	de, 0
	ld	e, a
	lea	hl, iy
	or	a, a
	sbc	hl, de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_floor_uc
_stdc_bit_floor_uc:
	call	__frameset0
	ld	e, (ix + 6)
	ld	l, 0
	ld	a, e
	or	a, a
	jr	z, BB72_2
	ld	c, 8
	ld	hl, 1
	ld	a, e
	call	__bctlz
	ld	e, a
	ld	a, c
	sub	a, e
	dec	a
	ld	c, a
	call	__ishl
BB72_2:
	ld	a, l
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_floor_us
_stdc_bit_floor_us:
	call	__frameset0
	ld	hl, (ix + 6)
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jr	nz, BB73_2
	ld.sis	hl, 0
	jp	BB73_3
BB73_2:
	ld.sis	bc, 16
	ld	de, 1
	call	__sctlz
	ld	l, a
	ld	a, c
	sub	a, l
	dec	a
	ex	de, hl
	ld	c, a
	call	__ishl
BB73_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_floor_ui
_stdc_bit_floor_ui:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	de, 0
	ld	bc, -8388608
	lea	hl, iy
	call	__ictlz
	push	bc
	pop	hl
	ld	c, a
	call	__ishru
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jr	z, BB74_2
	push	bc
	pop	de
BB74_2:
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_floor_ul
_stdc_bit_floor_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	ld	bc, 0
	ld	d, b
	call	__lcmpzero
	jr	z, BB75_2
	ld	bc, 31
	ld	iy, 1
	call	__lctlz
	or	a, a
	sbc	hl, hl
	ld	l, a
	call	__ixor
	lea	bc, iy
	ld	a, d
	call	__lshl
	ld	d, a
BB75_2:
	push	bc
	pop	hl
	ld	e, d
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_floor_ui48
_stdc_bit_floor_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	iy, 0
	call	__i48cmpzero
	jr	nz, BB76_2
	lea	de, iy
	jr	BB76_3
BB76_2:
	ld	bc, 255
	call	__i48ctlz
	lea	hl, iy
	ld	l, a
	ld	de, 256
	add	hl, de
	call	__iand
	push	hl
	pop	de
	ld	hl, 47
	or	a, a
	sbc	hl, de
	ld	c, l
	ld	hl, 1
	lea	de, iy
	call	__i48shl
	push	hl
	pop	iy
BB76_3:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_floor_ull
_stdc_bit_floor_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	ld	iy, 0
	call	__llcmpzero
	jr	nz, BB77_2
	lea	de, iy
	ld.sis	bc, 0
	jp	BB77_3
BB77_2:
	call	__llctlz
	lea	hl, iy
	ld	l, a
	ld	bc, 63
	call	__ixor
	push	hl
	ld	hl, 1
	lea	de, iy
	ld.sis	bc, 0
	call	__llshl
	push	hl
	pop	iy
	pop	hl
BB77_3:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_ceil_uc
_stdc_bit_ceil_uc:
	call	__frameset0
	ld	a, (ix + 6)
	cp	a, 2
	jr	nc, BB78_2
	ld	l, 1
	jr	BB78_3
BB78_2:
	ld	e, 8
	ld	hl, 1
	dec	a
	call	__bctlz
	ld	c, a
	ld	a, e
	sub	a, c
	ld	c, a
	call	__ishl
BB78_3:
	ld	a, l
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_ceil_us
_stdc_bit_ceil_us:
	call	__frameset0
	ld	bc, (ix + 6)
	ld.sis	de, 2
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	jr	nc, BB79_2
	ld.sis	hl, 1
	jr	BB79_3
BB79_2:
	ld.sis	de, 16
	ld	iy, 1
	dec.sis	bc
	ld	l, c
	ld	h, b
	call	__sctlz
	ld	l, a
	ld	a, e
	sub	a, l
	lea	hl, iy
	ld	c, a
	call	__ishl
BB79_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_ceil_ui
_stdc_bit_ceil_ui:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	bc, 23
	ld	de, 2
	lea	hl, iy
	dec	hl
	call	__ictlz
	ld	l, a
	ld	a, c
	sub	a, l
	push	de
	pop	hl
	ld	c, a
	call	__ishl
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, de
	jr	nc, BB80_2
	ld	bc, 1
BB80_2:
	push	bc
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_ceil_ul
_stdc_bit_ceil_ul:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	e, (ix + 9)
	ld	iy, 2
	ld	d, iyh
	lea	bc, iy
	ld	a, d
	call	__lcmpu
	jr	nc, BB81_2
	ld	hl, 1
	jr	BB81_3
BB81_2:
	ld	a, -1
	ld	bc, -1
	call	__ladd
	call	__lctlz
	inc	bc
	ld	c, a
	ld	hl, 31
	or	a, a
	sbc	hl, bc
	lea	bc, iy
	ld	a, d
	call	__lshl
	push	bc
	pop	hl
	ld	d, a
BB81_3:
	ld	e, d
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_ceil_ui48
_stdc_bit_ceil_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, 2
	ld	iy, 0
	call	__i48cmpu
	jr	nc, BB82_2
	ld	hl, 1
	ld	de, 0
	jr	BB82_3
BB82_2:
	ld	iy, (ix + 6)
	ld	bc, -1
	add	iy, bc
	ex	de, hl
	adc	hl, bc
	push	hl
	pop	de
	lea	hl, iy
	call	__i48ctlz
	ld	iy, 0
	lea	hl, iy
	ld	l, a
	ld	de, 256
	add	hl, de
	ld	bc, 255
	call	__iand
	push	hl
	pop	de
	ld	hl, 47
	or	a, a
	sbc	hl, de
	ld	c, l
	ld	hl, 2
	lea	de, iy
	call	__i48shl
BB82_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_bit_ceil_ull
_stdc_bit_ceil_ull:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	ld	iy, 0
	call	__llcmpzero
	jr	nz, BB83_2
	lea	de, iy
	ld.sis	bc, 0
	jp	BB83_3
BB83_2:
	call	__llctlz
	lea	hl, iy
	ld	l, a
	ld	bc, 63
	call	__ixor
	push	hl
	ld	hl, 1
	lea	de, iy
	ld.sis	bc, 0
	call	__llshl
	push	hl
	pop	iy
	pop	hl
BB83_3:
	lea	hl, iy
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_left_uc
_stdc_rotate_left_uc:
	call	__frameset0
	ld	l, (ix + 6)
	ld	e, (ix + 9)
	ld	a, e
	and	a, 7
	ld	b, a
	ld	a, l
	call	__bshl
	ld	c, a
	ld	a, e
	neg
	and	a, 7
	ld	b, a
	ld	a, l
	call	__bshru
	ld	l, a
	ld	a, c
	or	a, l
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_left_us
_stdc_rotate_left_us:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, (ix + 9)
	ld.sis	bc, 15
	call	__sand
	ld	c, l
	ld	b, h
	ld	l, e
	ld	h, d
	call	__sshl
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	hl, (ix + 9)
	call	__sneg
	ld.sis	bc, 15
	call	__sand
	ld	c, l
	ld	b, h
	ld	l, e
	ld	h, d
	call	__sshru
	ld	c, l
	ld	b, h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	call	__sor
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_left_ui
_stdc_rotate_left_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	a, (ix + 9)
	ld	(ix + 6), hl
	ld	(ix + 9), a
	pop	ix
	jp	___ez80_rotateleft24
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_left_ul
_stdc_rotate_left_ul:
	ld	hl, -1
	call	__frameset
	ld	a, (ix + 9)
	ld	iyl, a
	ld	hl, (ix + 12)
	ld	d, 0
	ld	bc, 31
	ld	e, d
	ld	a, d
	call	__land
	ld	bc, (ix + 6)
	ld	a, iyl
	call	__lshl
	push	bc
	pop	iy
	ld	(ix - 1), a
	ld	hl, (ix + 12)
	ld	e, d
	call	__lneg
	ld	bc, 31
	ld	a, d
	call	__land
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__lshru
	lea	hl, iy
	ld	e, (ix - 1)
	call	__lor
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_left_ui48
_stdc_rotate_left_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	a, (ix + 12)
	ld	(ix + 6), hl
	ld	(ix + 9), de
	ld	(ix + 12), a
	pop	ix
	jp	___ez80_rotateleft48
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_left_ull
_stdc_rotate_left_ull:
	ld	hl, -9
	call	__frameset
	ld	hl, (ix + 15)
	ld	iy, 0
	ld.sis	bc, 0
	ld	de, 63
	push	iy
	push	iy
	push	de
	lea	de, iy
	call	__lland
	pop	de
	pop	de
	pop	de
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llshl
	ld	(ix - 3), hl
	ld	(ix - 6), de
	ld	(ix - 9), bc
	pop	hl
	ld	hl, (ix + 15)
	lea	de, iy
	ld.sis	bc, 0
	call	__llneg
	push	iy
	push	iy
	ld	iy, 63
	push	iy
	call	__lland
	pop	de
	pop	de
	pop	de
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llshru
	pop	iy
	push	bc
	push	de
	push	hl
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, (ix - 9)
	call	__llor
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_right_uc
_stdc_rotate_right_uc:
	call	__frameset0
	ld	l, (ix + 6)
	ld	e, (ix + 9)
	ld	a, e
	and	a, 7
	ld	b, a
	ld	a, l
	call	__bshru
	ld	c, a
	ld	a, e
	neg
	and	a, 7
	ld	b, a
	ld	a, l
	call	__bshl
	ld	l, a
	ld	a, c
	or	a, l
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_right_us
_stdc_rotate_right_us:
	call	__frameset0
	ld	de, (ix + 6)
	ld	hl, (ix + 9)
	ld.sis	bc, 15
	call	__sand
	ld	c, l
	ld	b, h
	ld	l, e
	ld	h, d
	call	__sshru
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	ld	hl, (ix + 9)
	call	__sneg
	ld.sis	bc, 15
	call	__sand
	ld	c, l
	ld	b, h
	ld	l, e
	ld	h, d
	call	__sshl
	ld	c, l
	ld	b, h
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	call	__sor
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_right_ui
_stdc_rotate_right_ui:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	a, (ix + 9)
	ld	(ix + 6), hl
	ld	(ix + 9), a
	pop	ix
	jp	___ez80_rotateright24
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_right_ul
_stdc_rotate_right_ul:
	ld	hl, -1
	call	__frameset
	ld	a, (ix + 9)
	ld	iyl, a
	ld	hl, (ix + 12)
	ld	d, 0
	ld	bc, 31
	ld	e, d
	ld	a, d
	call	__land
	ld	bc, (ix + 6)
	ld	a, iyl
	call	__lshru
	push	bc
	pop	iy
	ld	(ix - 1), a
	ld	hl, (ix + 12)
	ld	e, d
	call	__lneg
	ld	bc, 31
	ld	a, d
	call	__land
	ld	bc, (ix + 6)
	ld	a, (ix + 9)
	call	__lshl
	lea	hl, iy
	ld	e, (ix - 1)
	call	__lor
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_right_ui48
_stdc_rotate_right_ui48:
	call	__frameset0
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	a, (ix + 12)
	ld	(ix + 6), hl
	ld	(ix + 9), de
	ld	(ix + 12), a
	pop	ix
	jp	___ez80_rotateright48
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_stdc_rotate_right_ull
_stdc_rotate_right_ull:
	ld	hl, -9
	call	__frameset
	ld	hl, (ix + 15)
	ld	iy, 0
	ld.sis	bc, 0
	ld	de, 63
	push	iy
	push	iy
	push	de
	lea	de, iy
	call	__lland
	pop	de
	pop	de
	pop	de
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llshru
	ld	(ix - 3), hl
	ld	(ix - 6), de
	ld	(ix - 9), bc
	pop	hl
	ld	hl, (ix + 15)
	lea	de, iy
	ld.sis	bc, 0
	call	__llneg
	push	iy
	push	iy
	ld	iy, 63
	push	iy
	call	__lland
	pop	de
	pop	de
	pop	de
	push	hl
	ld	hl, (ix + 6)
	ld	de, (ix + 9)
	ld	bc, (ix + 12)
	call	__llshl
	pop	iy
	push	bc
	push	de
	push	hl
	ld	hl, (ix - 3)
	ld	de, (ix - 6)
	ld	bc, (ix - 9)
	call	__llor
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 15.0.7 (https://github.com/CE-Programming/llvm-project db91fd729cd188daf925aaf5043a6ca0d3660655)"
	extern	___ez80_ffsc
	extern	__lor
	extern	__Unwind_SjLj_Register
	extern	__llneg
	extern	___ez80_ffss
	extern	__inot
	extern	__bctlz
	extern	__lcmpzero
	extern	__lcttz
	extern	__sshl
	extern	__i48ctlz
	extern	___ez80_popcounti48
	extern	__llcmpzero
	extern	___ez80_popcountc
	extern	__sand
	extern	___ez80_popcounts
	extern	__ishl
	extern	__ladd
	extern	__sshru
	extern	__sneg
	extern	__llshru
	extern	__iand
	extern	__ipopcnt
	extern	__lladd
	extern	__icttz
	extern	__sctlz
	extern	__ixor
	extern	__i48cmpzero
	extern	__llor
	extern	__llctlz
	extern	__lpopcnt
	extern	__lshru
	extern	__i48cmpu
	extern	__frameset
	extern	__lctlz
	extern	__lnot
	extern	__i48not
	extern	___ez80_ctzc
	extern	__llnot
	extern	__ishru
	extern	___ez80_ctzi48
	extern	__llpopcnt
	extern	__llcmpu
	extern	__Unwind_SjLj_Unregister
	extern	__lshl
	extern	__i48shl
	extern	___ez80_rotateleft24
	extern	__ictlz
	extern	__scttz
	extern	___ez80_ffsi48
	extern	__land
	extern	__llshl
	extern	___ez80_rotateright24
	extern	__i48and
	extern	__bshl
	extern	__llcttz
	extern	__lcmpu
	extern	__snot
	extern	__frameset0
	extern	__sor
	extern	__bshru
	extern	__lland
	extern	___ez80_rotateleft48
	extern	__lneg
	extern	___ez80_rotateright48
